// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// repr_tree_cpp
DataFrame repr_tree_cpp(DataFrame data, DataFrame is_na, IntegerVector roots, IntegerVector yes, IntegerVector no, IntegerVector missing, LogicalVector is_leaf, IntegerVector feature, NumericVector split, IntegerVector decision_type, IntegerVector trees, IntegerVector depth);
RcppExport SEXP _sylvan_repr_tree_cpp(SEXP dataSEXP, SEXP is_naSEXP, SEXP rootsSEXP, SEXP yesSEXP, SEXP noSEXP, SEXP missingSEXP, SEXP is_leafSEXP, SEXP featureSEXP, SEXP splitSEXP, SEXP decision_typeSEXP, SEXP treesSEXP, SEXP depthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type is_na(is_naSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type roots(rootsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type yes(yesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type no(noSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type missing(missingSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type is_leaf(is_leafSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type feature(featureSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type split(splitSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type decision_type(decision_typeSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type trees(treesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type depth(depthSEXP);
    rcpp_result_gen = Rcpp::wrap(repr_tree_cpp(data, is_na, roots, yes, no, missing, is_leaf, feature, split, decision_type, trees, depth));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_sylvan_repr_tree_cpp", (DL_FUNC) &_sylvan_repr_tree_cpp, 12},
    {NULL, NULL, 0}
};

RcppExport void R_init_sylvan(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
